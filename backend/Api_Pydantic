from __future__ import annotations
from typing import List, Optional, Generic, TypeVar, Literal
from uuid import UUID
from datetime import datetime

from pydantic import BaseModel, Field, EmailStr, AnyUrl, ConfigDict, field_validator, model_validator
from pydantic.generics import GenericModel

T = TypeVar("T")

class APIError(BaseModel):
    message: str = Field(...)
    code: str = Field(...)

class Paginated(GenericModel, Generic[T]):
    items: List[T]
    total: int
    page: int = Field(1, ge=1)
    per_page: int = Field(20, ge=1, le=200)
    next_page: Optional[int] = None

class Reminder(BaseModel):
    model_config = ConfigDict(extra="ignore")
    minutes_before_start: int = Field(..., ge=0, le=10080)
    method: Literal["popup", "email"] = "popup"

class Visibility(BaseModel):
    value: Literal["public", "private", "unlisted"] = "public"

class RSVPStatus(BaseModel):
    value: Literal["going", "interested", "declined"] = "going"

class UserBase(BaseModel):
    model_config = ConfigDict(extra="forbid")
    email: EmailStr
    full_name: Optional[str] = None
    avatar_url: Optional[AnyUrl] = None

class UserCreate(UserBase):
    password: str = Field(..., min_length=8)

class UserRead(UserBase):
    id: UUID
    created_at: datetime
    updated_at: datetime

class UserUpdate(BaseModel):
    model_config = ConfigDict(extra="forbid")
    full_name: Optional[str] = None
    avatar_url: Optional[AnyUrl] = None

class EventBase(BaseModel):
    model_config = ConfigDict(extra="forbid")

    title: str = Field(..., min_length=1, max_length=200)
    description: Optional[str] = Field(None, max_length=5000)
    location: Optional[str] = Field(None, max_length=500)
    start_at: datetime
    end_at: datetime
    timezone: Optional[str] = Field(None)
    all_day: bool = False
    visibility: Literal["public", "private", "unlisted"] = "public"
    tags: List[str] = []
    rrule: Optional[str] = None
    capacity: Optional[int] = Field(None, ge=1)
    reminders: List[Reminder] = []

    @field_validator("title")
    @classmethod
    def no_blank_title(cls, v: str) -> str:
        if not v or not v.strip():
            raise ValueError("title cannot be blank")
        return v.strip()

    @model_validator(mode="after")
    def validate_times(self) -> "EventBase":
        if self.start_at.tzinfo is None or self.start_at.utcoffset() is None:
            raise ValueError("start_at must be timezone-aware (include offset)")
        if self.end_at.tzinfo is None or self.end_at.utcoffset() is None:
            raise ValueError("end_at must be timezone-aware (include offset)")
        if self.end_at <= self.start_at:
            raise ValueError("end_at must be after start_at")
        return self

class EventCreate(EventBase):
    organizer_id: UUID

class EventUpdate(BaseModel):
    model_config = ConfigDict(extra="forbid")

    title: Optional[str] = Field(None, min_length=1, max_length=200)
    description: Optional[str] = Field(None, max_length=5000)
    location: Optional[str] = Field(None, max_length=500)
    start_at: Optional[datetime] = None
    end_at: Optional[datetime] = None
    timezone: Optional[str] = None
    all_day: Optional[bool] = None
    visibility: Optional[Literal["public", "private", "unlisted"]] = None
    tags: Optional[List[str]] = None
    rrule: Optional[str] = None
    capacity: Optional[int] = Field(None, ge=1)
    reminders: Optional[List[Reminder]] = None

    @model_validator(mode="after")
    def validate_times(self) -> "EventUpdate":
        if self.start_at and (self.start_at.tzinfo is None or self.start_at.utcoffset() is None):
            raise ValueError("start_at must be timezone-aware (include offset)")
        if self.end_at and (self.end_at.tzinfo is None or self.end_at.utcoffset() is None):
            raise ValueError("end_at must be timezone-aware (include offset)")
        if self.start_at and self.end_at and self.end_at <= self.start_at:
            raise ValueError("end_at must be after start_at")
        return self

class EventRead(EventBase):
    id: UUID
    organizer_id: UUID
    attendees_count: int = 0
    created_at: datetime
    updated_at: datetime

class RSVPCreate(BaseModel):
    status: Literal["going", "interested", "declined"] = "going"

class RSVPRead(BaseModel):
    id: UUID
    event_id: UUID
    user_id: UUID
    status: Literal["going", "interested", "declined"]
    created_at: datetime

class Token(BaseModel):
    access_token: str
    token_type: Literal["bearer"] = "bearer"

class LoginRequest(BaseModel):
    email: EmailStr
    password: str

__all__ = [
    "APIError", "Paginated",
    "Reminder", "Visibility", "RSVPStatus",
    "UserBase", "UserCreate", "UserRead", "UserUpdate",
    "EventBase", "EventCreate", "EventUpdate", "EventRead",
    "RSVPCreate", "RSVPRead",
    "Token", "LoginRequest",
]
